---
- ansible.builtin.debug:
    msg: START connection={{ ansible_connection }} nxos_bgp_neighbor sanity test

- name: Set a fact for 'intname'
  ansible.builtin.set_fact:
    intname: "{{ nxos_int1 }}"

- name: Set a fact for 'log_neighbor_changese'
  ansible.builtin.set_fact:
    log_neighbor_changese: enable
  when: (imagetag and imagetag is not search("D1|N1"))

- name: Set a fact for 'log_neighbor_changesd'
  ansible.builtin.set_fact:
    log_neighbor_changesd: disable
  when: (imagetag and imagetag is not search("D1|N1"))

- ansible.builtin.debug:
    var: titanium

- name: Set a fact for 'remove_private_asa'
  ansible.builtin.set_fact:
    remove_private_asa: all
  when: not titanium

- name: Set a fact for 'remove_private_asr'
  ansible.builtin.set_fact:
    remove_private_asr: replace-as
  when: not titanium

- name: "Setup: disable features"
  loop:
    - bgp
    - bfd
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: "{{ item }}"
    state: disabled

- name: "Setup: enable features"
  loop:
    - bgp
    - bfd
  cisco.nxos.nxos_feature:
    feature: "{{ item }}"
    state: enabled

- block:
    - name: Configure BGP neighbor1
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id001
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        connected_check: true
        capability_negotiation: true
        dynamic_capability: true
        ebgp_multihop: 2
        low_memory_exempt: true
        maximum_peers: 10
        suppress_4_byte_as: true
        timers_keepalive: 90
        timers_holdtime: 270
        log_neighbor_changes: "{{log_neighbor_changese|default(omit)}}"
        local_as: 22.33
        remote_as: 33.22
        description: just a description
        update_source: "{{ intname.capitalize() }}"
        shutdown: true
        state: present

    - ansible.builtin.assert: &id002
        that:
          - result.changed == true

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id001

    - ansible.builtin.assert: &id004
        that:
          - result.changed == false

    - name: Configure BGP neighbor2
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id003
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        connected_check: false
        capability_negotiation: false
        dynamic_capability: false
        ebgp_multihop: default
        low_memory_exempt: false
        maximum_peers: default
        suppress_4_byte_as: false
        timers_keepalive: default
        timers_holdtime: default
        log_neighbor_changes: "{{log_neighbor_changesd|default(omit)}}"
        local_as: default
        remote_as: default
        description: default
        update_source: default
        shutdown: false
        state: present

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id003

    - ansible.builtin.assert: *id004

    - name: Remove BGP
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id005
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        state: absent

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id005

    - ansible.builtin.assert: *id004

    - name: Configure BGP neighbor3
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id006
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        description: tested by ansible
        remove_private_as: "{{remove_private_asa|default(omit)}}"
        state: present

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id006

    - ansible.builtin.assert: *id004

    - name: Configure BGP neighbor4
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id007
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        description: tested by ansible
        remove_private_as: "{{remove_private_asr|default(omit)}}"
        state: present

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id007

    - ansible.builtin.assert: *id004

    - name: Remove BGP
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id005

    - ansible.builtin.assert: *id002

    - name: Configure BGP neighbor 3des password
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id008
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        remote_as: 30
        pwd: 386c0565965f89de
        pwd_type: 3des

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id008

    - ansible.builtin.assert: *id004

    - name: Remove BGP
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id005

    - ansible.builtin.assert: *id002

    - name: Configure BGP neighbor type 7 password
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id009
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        remote_as: 30
        pwd: 386c0565965f89de
        pwd_type: cisco_type_7

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id009

    - ansible.builtin.assert: *id004

    - name: Remove BGP neighbor password
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id010
        asn: 65535
        neighbor: 192.0.2.3/32
        vrf: "{{ item }}"
        remote_as: 30
        pwd: default
        pwd_type: default

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id010

    - ansible.builtin.assert: *id004

    - name: Remove BGP
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id005

    - ansible.builtin.assert: *id002

    - name: Configure BGP neighbor transport type passive
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id011
        asn: 65535
        neighbor: 192.0.2.3
        vrf: "{{ item }}"
        remote_as: 30
        transport_passive_only: true

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id011

    - ansible.builtin.assert: *id004

    - name: Configure BGP neighbor transport type default
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id012
        asn: 65535
        neighbor: 192.0.2.3
        vrf: "{{ item }}"
        remote_as: 30
        transport_passive_only: false

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id012

    - ansible.builtin.assert: *id004

    - name: Remove BGP
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id013
        asn: 65535
        neighbor: 192.0.2.3
        vrf: "{{ item }}"
        state: absent

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id013

    - ansible.builtin.assert: *id004

    - name: Configure BFD enable
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id014
        asn: 65535
        neighbor: 192.168.1.1
        bfd: enable
        state: present

    - ansible.builtin.assert: *id002

    - name: Check BFD enable idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id014

    - ansible.builtin.assert: *id004

    - name: Configure BFD disable idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor: &id015
        asn: 65535
        neighbor: 192.168.1.1
        bfd: disable
        state: present

    - ansible.builtin.assert: *id002

    - name: Check BFD disable idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor: *id015

    - ansible.builtin.assert: *id004
  always:
    - name: "Teardown: disable features"
      loop:
        - bgp
        - bfd
      ignore_errors: true
      cisco.nxos.nxos_feature:
        feature: "{{ item }}"
        state: disabled

- ansible.builtin.debug:
    msg: END connection={{ ansible_connection }} nxos_bgp_neighbor sanity test
