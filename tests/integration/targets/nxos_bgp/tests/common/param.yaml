---
- ansible.builtin.debug:
    msg: START connection={{ ansible_connection }} nxos_bgp parameter test

- name: Disable feature BGP
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: bgp
    state: disabled

- name: Enable feature BGP
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: bgp
    state: enabled

- block:
    - name: set multi vrf params
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id001
        asn: 65535
        vrf: "{{ item }}"
        router_id: 192.0.2.1
        bestpath_always_compare_med: true
        bestpath_aspath_multipath_relax: true
        bestpath_compare_routerid: true
        bestpath_cost_community_ignore: true
        bestpath_med_confed: true
        bestpath_med_missing_as_worst: true
        bestpath_med_non_deterministic: true
        graceful_restart_helper: true
        log_neighbor_changes: true
        maxas_limit: 50

    - assert: &id002
        that:
          - result.changed == true

    - name: Check Idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: *id001

    - assert: &id004
        that:
          - result.changed == false

    - name: reset multi vrf params
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id003
        asn: 65535
        vrf: "{{ item }}"
        bestpath_always_compare_med: false
        bestpath_aspath_multipath_relax: false
        bestpath_compare_routerid: false
        bestpath_cost_community_ignore: false
        bestpath_med_confed: false
        bestpath_med_missing_as_worst: false
        bestpath_med_non_deterministic: false
        graceful_restart_helper: false
        log_neighbor_changes: false
        maxas_limit: default
        router_id: default

    - assert: *id002

    - name: Check Idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: *id003

    - assert: *id004

    - name: set clusterid
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id005
        asn: 65535
        vrf: "{{ item }}"
        cluster_id: 10.0.0.1

    - assert: *id002

    - name: Check Idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: *id005

    - assert: *id004

    - name: reset cluster_id
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id006
        asn: 65535
        vrf: "{{ item }}"
        cluster_id: default

    - assert: *id002

    - name: Check Idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: *id006

    - assert: *id004

    - name: set confederation
      register: result
      cisco.nxos.nxos_bgp: &id007
        asn: 65535
        confederation_id: 99
        confederation_peers:
          - 16
          - 22
          - 18

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id007

    - assert: *id004

    - name: reset confederation
      register: result
      cisco.nxos.nxos_bgp: &id008
        asn: 65535
        confederation_id: default
        confederation_peers: default

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id008

    - assert: *id004

    - name: set confederation_local_as
      register: result
      cisco.nxos.nxos_bgp: &id009
        asn: 65535
        vrf: myvrf
        local_as: 33
        confederation_id: 99
        confederation_peers:
          - 16
          - 22
          - 18

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id009

    - assert: *id004

    - name: reset confederation local_as
      register: result
      cisco.nxos.nxos_bgp: &id010
        asn: 65535
        vrf: myvrf
        local_as: default
        confederation_id: default
        confederation_peers: default

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id010

    - assert: *id004

    - name: set local_as
      register: result
      cisco.nxos.nxos_bgp: &id011
        asn: 65535
        vrf: myvrf
        local_as: 33
        confederation_id: 99

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id011

    - assert: *id004

    - name: reset local_as
      register: result
      cisco.nxos.nxos_bgp: &id012
        asn: 65535
        vrf: myvrf
        confederation_id: default
        local_as: default

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id012

    - assert: *id004

    - name: set default vrf params
      register: result
      cisco.nxos.nxos_bgp: &id013
        asn: 65535
        event_history_cli: size_medium
        event_history_detail: size_large
        event_history_events: size_medium
        event_history_periodic: size_small
        enforce_first_as: false
        fast_external_fallover: false
        flush_routes: true
        shutdown: true

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id013

    - assert: *id004

    - name: reset default vrf params
      register: result
      cisco.nxos.nxos_bgp: &id014
        asn: 65535
        event_history_detail: default
        enforce_first_as: true
        fast_external_fallover: true
        flush_routes: false
        shutdown: false

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp: *id014

    - assert: *id004
  always:
    - name: Disable feature bgp
      ignore_errors: true
      cisco.nxos.nxos_feature:
        feature: bgp
        state: disabled

    - ansible.builtin.debug:
        msg: END connection={{ ansible_connection }} nxos_bgp parameter test
