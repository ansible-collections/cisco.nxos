---
- ansible.builtin.debug:
    msg: START connection={{ ansible_connection }} nxos_bgp parameter test

- name: Set a fact for 'bgp_best_path_limit'
  ansible.builtin.set_fact:
    bgp_best_path_limit: false

- name: Set a fact for 'bgp_best_path_limit'
  ansible.builtin.set_fact:
    bgp_best_path_limit: true
  when: imagetag is not search("I2")

- name: Set a fact for 'bgp_suppress_fib_supported'
  ansible.builtin.set_fact:
    bgp_suppress_fib_supported: false

- name: Set a fact for 'bgp_suppress_fib_supported'
  ansible.builtin.set_fact:
    bgp_suppress_fib_supported: true
  when: imagetag is not search("A8|D1|I2|I4")

- name: Disable 'feature bgp'
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: bgp
    state: disabled

- name: Enable 'feature bgp'
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: bgp
    state: enabled

- block:
    - name: Set bestpath limit
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id001
        asn: 65535
        vrf: "{{ item }}"
        timer_bestpath_limit: 255

    - ansible.builtin.assert: &id002
        that:
          - result.changed == true

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: *id001

    - ansible.builtin.assert: &id004
        that:
          - result.changed == false

    - name: Reset bestpath limit
      with_items: "{{ vrfs }}"
      register: result
      cisco.nxos.nxos_bgp: &id003
        asn: 65535
        vrf: "{{ item }}"
        timer_bestpath_limit: default

    - ansible.builtin.assert: *id002

    - name: Check idempotence
      with_items: "{{ vrfs }}"
      register: result
      when: bgp_best_path_limit
      cisco.nxos.nxos_bgp: *id003

    - ansible.builtin.assert: *id004
      when: bgp_best_path_limit

    - name: Set suppress FIB
      register: result
      cisco.nxos.nxos_bgp: &id005
        asn: 65535
        suppress_fib_pending: false

    - ansible.builtin.assert: *id002
      when: bgp_suppress_fib_supported

    - name: Check idempotence
      register: result
      when: bgp_suppress_fib_supported
      cisco.nxos.nxos_bgp: *id005

    - ansible.builtin.assert: *id004
      when: bgp_suppress_fib_supported

    - name: Reset suppress FIB
      register: result
      cisco.nxos.nxos_bgp: &id006
        asn: 65535
        suppress_fib_pending: true

    - ansible.builtin.assert: *id002
      when: bgp_suppress_fib_supported

    - name: Check idempotence
      register: result
      when: bgp_suppress_fib_supported
      cisco.nxos.nxos_bgp: *id006

    - ansible.builtin.assert: *id004
      when: bgp_suppress_fib_supported
  rescue:
    - ansible.builtin.debug:
        msg: Tests can fail on I2/I4/A8/Fretta or helsinki images
  always:
    - name: Disable 'feature bgp'
      ignore_errors: true
      cisco.nxos.nxos_feature:
        feature: bgp
        state: disabled

    - ansible.builtin.debug:
        msg: END connection={{ ansible_connection }} nxos_bgp parameter test
