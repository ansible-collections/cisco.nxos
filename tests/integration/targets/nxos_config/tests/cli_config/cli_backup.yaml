---
- ansible.builtin.debug:
    msg: END cli_config/backup.yaml on connection={{ ansible_connection }}

- name: Set a fact for 'can_become'
  ansible.builtin.set_fact:
    can_become: true

- name: Set a fact for 'can_become'
  ansible.builtin.set_fact:
    can_become: false
  when: platform is search('N9K') and (major_version is version('10.', 'ge'))

- name: Delete configurable backup file path
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ role_path }}/backup_test_dir/"
    - "{{ role_path }}/backup/backup.cfg"

- name: Collect any backup files
  ansible.builtin.find:
    paths: "{{ role_path }}/backup"
    pattern: "{{ inventory_hostname_short }}_config*"
  register: backup_files
  connection: local

- name: Delete backup files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{backup_files.files|default([])}}"

- name: Take configuration backup
  become: "{{ can_become }}"
  register: result
  ansible.netcommon.cli_config:
    backup: true

- ansible.builtin.assert:
    that:
      - result.changed == true

- name: Collect any backup files
  ansible.builtin.find:
    paths: "{{ role_path }}/backup"
    pattern: "{{ inventory_hostname_short }}_config*"
  register: backup_files
  connection: local

- ansible.builtin.assert:
    that:
      - backup_files.files is defined

- name: Take configuration backup in custom filename and directory path
  become: "{{ can_become }}"
  register: result
  ansible.netcommon.cli_config:
    backup: true
    backup_options:
      filename: backup.cfg
      dir_path: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}"

- ansible.builtin.assert:
    that:
      - result.changed == true

- name: Check if the backup file-1 exist
  ansible.builtin.find:
    paths: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}/backup.cfg"
  register: backup_file
  connection: local

- ansible.builtin.assert:
    that:
      - backup_file.files is defined

- name: Take configuration backup in custom filename
  become: "{{ can_become }}"
  register: result
  ansible.netcommon.cli_config:
    backup: true
    backup_options:
      filename: backup.cfg

- ansible.builtin.assert:
    that:
      - result.changed == true

- name: Check if the backup file-2 exist
  ansible.builtin.find:
    paths: "{{ role_path }}/backup/backup.cfg"
  register: backup_file
  connection: local

- ansible.builtin.assert:
    that:
      - backup_file.files is defined

- name: Take configuration backup in custom path and default filename
  become: "{{ can_become }}"
  register: result
  ansible.netcommon.cli_config:
    backup: true
    backup_options:
      dir_path: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}"

- ansible.builtin.assert:
    that:
      - result.changed == true

- name: Check if the backup file-3 exist
  ansible.builtin.find:
    paths: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}"
    pattern: "{{ inventory_hostname_short }}_config*"
  register: backup_file
  connection: local

- ansible.builtin.assert:
    that:
      - backup_file.files is defined

- ansible.builtin.debug:
    msg: END cli_config/backup.yaml on connection={{ ansible_connection }}
