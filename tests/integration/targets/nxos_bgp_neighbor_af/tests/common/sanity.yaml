---
- debug: msg="START connection={{ ansible_connection }} nxos_bgp_neighbor_af sanity
    test"

- set_fact: soft_reconfiguration_ina="always"
  when: imagetag is not search("D1|N1")

- name: Disable feature BGP
  ignore_errors: true
  cisco.nxos.nxos_feature: &id013
    feature: bgp
    state: disabled

- name: Enable feature BGP
  ignore_errors: true
  cisco.nxos.nxos_feature:
    feature: bgp
    state: enabled

- block:

    - name: Configure BGP neighbor address-family
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id001
        asn: 65535
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        additional_paths_receive: enable
        additional_paths_send: enable
        advertise_map_exist:
          - ansible_rm
          - my_exist_map
        allowas_in: true
        default_originate: true
        disable_peer_as_check: true
        filter_list_in: my_filter_list_in
        filter_list_out: my_filter_list_out
        max_prefix_limit: 100
        max_prefix_threshold: 50
        max_prefix_warning: 'true'
        next_hop_self: true
        next_hop_third_party: false
        prefix_list_in: pfx_in
        prefix_list_out: pfx_out
        send_community: both
        soft_reconfiguration_in: enable
        suppress_inactive: true
        unsuppress_map: unsup_map
        weight: '30'
        state: present

    - assert: &id002
        that:
          - result.changed == true

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id001

    - assert: &id004
        that:
          - result.changed == false

    - name: Configure BGP neighbor address-family def1
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id003
        asn: 65535
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        additional_paths_receive: inherit
        additional_paths_send: inherit
        advertise_map_exist: default
        allowas_in: false
        default_originate: false
        disable_peer_as_check: false
        filter_list_in: default
        filter_list_out: default
        max_prefix_limit: default
        max_prefix_threshold: default
        max_prefix_warning: false
        next_hop_self: false
        next_hop_third_party: false
        prefix_list_in: default
        prefix_list_out: default
        send_community: none
        soft_reconfiguration_in: inherit
        suppress_inactive: false
        unsuppress_map: default
        weight: default
        state: present

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id003

    - assert: *id004

    - name: 'Setup: Remove BGP config'
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id005
        asn: 65535
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        state: absent

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id005

    - assert: *id004

    - name: Configure BGP neighbor address-family
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id006
        asn: 65535
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        allowas_in_max: '5'
        advertise_map_non_exist:
          - ansible_rm
          - my_non_exist_map
        default_originate_route_map: my_route_map
        max_prefix_limit: 100
        max_prefix_interval: 30
        max_prefix_threshold: 50
        route_map_in: rm_in
        route_map_out: rm_out
        state: present

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id006

    - assert: *id004

    - name: Configure BGP neighbor address-family def2
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id007
        asn: 65535
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        allowas_in_max: default
        advertise_map_non_exist: default
        default_originate_route_map: default
        max_prefix_limit: default
        max_prefix_interval: default
        max_prefix_threshold: default
        route_map_in: default
        route_map_out: default
        state: present

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id007

    - assert: *id004

    - name: 'Setup: Remove BGP config'
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id005

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id005

    - assert: *id004

    - name: Configure eBGP
      cisco.nxos.nxos_bgp_neighbor:
        asn: 65535
        vrf: blue
        neighbor: 192.0.2.3
        remote_as: 2

    - name: Configure BGP neighbor 3
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id008
        asn: 65535
        vrf: blue
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        additional_paths_receive: disable
        additional_paths_send: disable
        as_override: 'true'
        send_community: standard
        soft_reconfiguration_in: '{{soft_reconfiguration_ina|default(omit)}}'
        soo: "3:3"
        next_hop_third_party: true
        state: present

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id008

    - assert: *id004

    - name: Configure BGP neighbor def3
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id009
        asn: 65535
        vrf: blue
        neighbor: 192.0.2.3
        afi: ipv4
        safi: unicast
        additional_paths_receive: inherit
        additional_paths_send: inherit
        as_override: false
        send_community: default
        soo: default
        state: present

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id009

    - assert: *id004

    - name: 'Setup: Remove BGP config'
      register: result
      cisco.nxos.nxos_bgp: &id012
        asn: 65535
        state: absent

    - assert: *id002

    - name: Configure BGP neighbor af route_reflector_client
      cisco.nxos.nxos_bgp_neighbor:
        asn: 65535
        neighbor: 192.0.2.2
        remote_as: 65535

    - name: Configure BGP neighbor 4
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id010
        asn: 65535
        neighbor: 192.0.2.2
        afi: ipv4
        safi: unicast
        route_reflector_client: 'true'

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id010

    - assert: *id004

    - name: Configure BGP neighbor def4
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: &id011
        asn: 65535
        neighbor: 192.0.2.2
        afi: ipv4
        safi: unicast
        route_reflector_client: false

    - assert: *id002

    - name: Check Idempotence
      register: result
      cisco.nxos.nxos_bgp_neighbor_af: *id011

    - assert: *id004
  always:

    - name: Cleanup BGP
      ignore_errors: true
      cisco.nxos.nxos_bgp: *id012

    - name: Disable feature bgp
      cisco.nxos.nxos_feature: *id013

    - debug: msg="END connection={{ ansible_connection }} nxos_bgp_neighbor_af sanity
        test"
