---
- ansible.builtin.debug:
    msg: START connection={{ ansible_connection }} nxos_vlan sanity test

- name: Set a fact for 'testint1'
  ansible.builtin.set_fact:
    testint1: "{{ nxos_int1 }}"

- name: Set a fact for 'testint2'
  ansible.builtin.set_fact:
    testint2: "{{ nxos_int2 }}"

- block:
    - name: Install and enable 'feature-set fabricpath'
      when: platform is search('N5K|N7K')
      cisco.nxos.nxos_config:
        lines:
          - install feature-set fabricpath
          - feature-set fabricpath

    - name: Enable 'feature vn-segment-vlan-based'
      when: platform is search('N9K')
      cisco.nxos.nxos_config:
        commands:
          - feature vn-segment-vlan-based
        match: none

    - name: Vlan teardown
      ignore_errors: true
      cisco.nxos.nxos_vlan: &id013
        vlan_range: 2-200
        state: absent

    - name: Ensure a range of vlans are present on the switch
      register: result
      cisco.nxos.nxos_vlan: &id001
        vlan_range: 2-10,20,50,55-60,100-150

    - ansible.builtin.assert: &id002
        that:
          - result.changed == true

    - name: Vlan idempotence
      register: result
      cisco.nxos.nxos_vlan: *id001

    - ansible.builtin.assert: &id004
        that:
          - result.changed == false

    - name: Ensure VLAN 50 exists with the name web and is in the shutdown state
      register: result
      when: platform is search('N9K')
      cisco.nxos.nxos_vlan: &id003
        vlan_id: 50
        vlan_state: suspend
        admin_state: down
        name: WEB
        mapped_vni: 5555

    - ansible.builtin.assert: *id002
      when: platform is search('N9K')

    - name: Web1 idempotence
      register: result
      when: platform is search('N9K')
      cisco.nxos.nxos_vlan: *id003

    - ansible.builtin.assert: *id004
      when: platform is search('N9K')

    - name: Change name and vni to default
      register: result
      when: platform is search('N9K')
      cisco.nxos.nxos_vlan: &id005
        vlan_id: 50
        vlan_state: active
        admin_state: up
        name: default
        mapped_vni: default

    - ansible.builtin.assert: *id002
      when: platform is search('N9K')

    - name: Web2 idempotence
      register: result
      when: platform is search('N9K')
      cisco.nxos.nxos_vlan: *id005

    - ansible.builtin.assert: *id004
      when: platform is search('N9K')

    - name: Ensure VLAN 50 exists with the name web and is in the shutdown state
      register: result
      when: platform is search('N3K|N7K')
      cisco.nxos.nxos_vlan: &id006
        vlan_id: 50
        vlan_state: suspend
        admin_state: down
        name: WEB

    - ansible.builtin.assert: *id002
      when: platform is search('N3K|N7K')

    - name: Web3 idempotence
      register: result
      when: platform is search('N3K|N7K')
      cisco.nxos.nxos_vlan: *id006

    - ansible.builtin.assert: *id004
      when: platform is search('N3K|N7K')

    - name: Change name to default
      register: result
      when: platform is search('N3K|N7K')
      cisco.nxos.nxos_vlan: &id007
        vlan_id: 50
        vlan_state: active
        admin_state: up
        name: default

    - ansible.builtin.assert: *id002
      when: platform is search('N3K|N7K')

    - name: Web4 idempotence
      register: result
      when: platform is search('N3K|N7K')
      cisco.nxos.nxos_vlan: *id007

    - ansible.builtin.assert: *id004
      when: platform is search('N3K|N7K')

    - name: Change mode
      register: result
      when: platform is search('N5K|N7K')
      cisco.nxos.nxos_vlan: &id008
        vlan_id: 50
        mode: fabricpath

    - ansible.builtin.assert: *id002
      when: platform is search('N5K|N7K')

    - name: Mode1 idempotence
      register: result
      when: platform is search('N5K|N7K')
      cisco.nxos.nxos_vlan: *id008

    - ansible.builtin.assert: *id004
      when: platform is search('N5K|N7K')

    - name: Change mode again
      register: result
      when: platform is search('N5K|N7K')
      cisco.nxos.nxos_vlan: &id009
        vlan_id: 50
        mode: ce

    - ansible.builtin.assert: *id002
      when: platform is search('N5K|N7K')

    - name: Mode2 idempotence
      register: result
      when: platform is search('N5K|N7K')
      cisco.nxos.nxos_vlan: *id009

    - ansible.builtin.assert: *id004
      when: platform is search('N5K|N7K')

    - name: Ensure VLAN is not on the device
      register: result
      cisco.nxos.nxos_vlan: &id010
        vlan_id: 50
        state: absent

    - ansible.builtin.assert: *id002

    - name: No VLAN idempotence
      register: result
      cisco.nxos.nxos_vlan: *id010

    - ansible.builtin.assert: *id004

    - name: Add interfaces to VLAN
      register: result
      cisco.nxos.nxos_vlan: &id011
        vlan_id: 101
        vlan_state: suspend
        interfaces:
          - "{{ testint1 }}"
          - "{{ testint2 }}"

    - ansible.builtin.assert: *id002

    - name: Addint idempotence
      register: result
      cisco.nxos.nxos_vlan: *id011

    - ansible.builtin.assert: *id004

    - name: Remove interfaces from VLAN
      register: result
      cisco.nxos.nxos_vlan: &id012
        vlan_id: 101
        interfaces: default

    - ansible.builtin.assert: *id002

    - name: Remint idempotence
      register: result
      cisco.nxos.nxos_vlan: *id012

    - ansible.builtin.assert: *id004
  always:
    - name: Remove int from VLAN
      ignore_errors: true
      cisco.nxos.nxos_vlan: *id012

    - name: VLAN teardown final
      ignore_errors: true
      cisco.nxos.nxos_vlan: *id013

    - name: Disable 'feature vn-segment-vlan-based'
      ignore_errors: true
      when: platform is search('N9K')
      cisco.nxos.nxos_feature:
        feature: vn-segment-vlan-based
        state: disabled

- ansible.builtin.debug:
    msg: END connection={{ ansible_connection }} nxos_vlan sanity test
